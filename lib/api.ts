import axios from "axios";
import type { Note, NotePayload } from "@/types/note";

const API_URL = process.env.NEXT_PUBLIC_API_URL || "https://next-docs-api.onrender.com";
const TOKEN = process.env.NOTEHUB_TOKEN;

export const API = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
    ...(TOKEN && { Authorization: `Bearer ${TOKEN}` }),
  },
});

// üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
export const fetchNotes = async (query: string = "", page: number = 1): Promise<Note[]> => {
  const res = await API.get(`/notes?q=${query}&page=${page}`);
  return res.data;
};

// üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
export const fetchNoteById = async (id: string): Promise<Note> => {
  const res = await API.get(`/notes/${id}`);
  return res.data;
};

// ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
export const createNote = async (payload: NotePayload): Promise<Note> => {
  const res = await API.post("/notes", payload);
  return res.data;
};

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
export const deleteNote = async (id: string): Promise<void> => {
  await API.delete(`/notes/${id}`);
};

// üîß –õ–æ–≥ –∑–∞–ø—Ä–æ—Å–æ–≤ (—É–¥–∞–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏!)
if (process.env.NODE_ENV !== "production") {
  API.interceptors.request.use((config) => {
    console.log("‚û°Ô∏è [API Request]", config.method?.toUpperCase(), config.url);
    console.log("üîê Auth Header:", config.headers.Authorization);
    return config;
  });
}
